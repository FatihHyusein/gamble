@mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

@mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

@mixin flex-flow($values: (row nowrap)) {
    // No Webkit Box fallback.
    -webkit-flex-flow: $values;
    -moz-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
}

@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
    } @else if $value == space-around {
        -ms-flex-pack: distribute;
    } @else {
        -webkit-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    justify-content: $value;
}

@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}

@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    -moz-align-self: $value;
    @if $value == flex-start {
        -ms-flex-item-align: start;
    } @else if $value == flex-end {
        -ms-flex-item-align: end;
    } @else {
        -ms-flex-item-align: $value;
    }
    align-self: $value;
}

@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    -moz-align-content: $value;
    @if $value == flex-start {
        -ms-flex-line-pack: start;
    } @else if $value == flex-end {
        -ms-flex-line-pack: end;
    } @else {
        -ms-flex-line-pack: $value;
    }
    align-content: $value;
}


@mixin bg-gradient($start,$startPercent, $middle,$middlePercent, $end, $endPercent) {
    background: $start;
    background: -moz-linear-gradient(top, $start, $middle, $end);
    background: -webkit-gradient(left top, left bottom, color-stop($startPercent, $start), color-stop($middlePercent, $middle), color-stop($endPercent, $end));
    background: -webkit-linear-gradient(top, $start $startPercent, $middle $middlePercent, $end $endPercent);
    background: -o-linear-gradient(top, $start $startPercent, $middle $middlePercent, $end $endPercent);
    background: -ms-linear-gradient(top, $start $startPercent, $middle $middlePercent, $end $endPercent);


    background: linear-gradient(to bottom, $start $startPercent, $middle $middlePercent, $end $endPercent);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=$start, endColorstr=$end, GradientType=0 );
}

@mixin transform($params) {
    -ms-transform: $params; /* IE 9 */
    -webkit-transform:$params; /* Chrome, Safari, Opera */
    -moz-transform: $params;
    -o-transform: $params;
    transform: $params;
}

@mixin transform-style($params) {
    -webkit-transform-style: $params;
    -moz-transform-style: $params;
    -ms-transform-style: $params;
    transform-style: $params;
}

@mixin backface-visibility ($arguments) {
    -webkit-backface-visibility: $arguments;
    -moz-backface-visibility: $arguments;
    -ms-backface-visibility: $arguments;
    -o-backface-visibility: $arguments;
    backface-visibility: $arguments;
}

@mixin box-shadow($params) {
    -webkit-box-shadow: $params;
    -moz-box-shadow: $params;
    box-shadow: $params;
}

@mixin transition($params) {
    -webkit-transition: $params;
    -moz-transition: $params;
    -ms-transition: $params;
    -o-transition: $params;
    transition: $params;
}

@mixin transition-duration($params) {
    -webkit-transition-duration: $params;
    -moz-transition-duration: $params;
    -ms-transition-duration: $params;
    -o-transition-duration: $params;
    transition-duration: $params;
}

@mixin transition-timing-function($params) {
    -webkit-transition-timing-function: $params;
    -moz-transition-timing-function: $params;
    -o-transition-timing-function: $params;
    transition-timing-function: $params;
}

@mixin border-radius($params) {
    border-radius: $params;
    -moz-border-radius: $params;
    -webkit-border-radius: $params;
}

@mixin filter($params) {
    -webkit-filter: $params; /* Chrome, Safari, Opera */
    filter: $params;
}

@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
    -o-transform-origin: $origin;
    -ms-transform-origin: $origin;
    -webkit-transform-origin: $origin;
    transform-origin: $origin;
}

@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

@mixin addTransition() {
    @include transition(all 500ms ease-out 50ms);
}

@mixin removeTransition(){
    @include transition(none);
}

@mixin box-sizing($box-model) {
    -webkit-box-sizing: $box-model; // Safari <= 5
    -moz-box-sizing: $box-model; // Firefox <= 19
    box-sizing: $box-model;
}
